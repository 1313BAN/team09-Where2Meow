    async updateImageSrc() {\n      this.loadAttempts++\n      \n      if (!this.imageUrl) {\n        this.imgSrc = DEFAULT_IMAGE_URL\n        this.loading = false\n        this.lastImageUrl = null\n        return\n      }\n\n      const processedUrl = getFullImageUrl(this.imageUrl)\n      const isUrlChanged = this.lastImageUrl !== processedUrl\n      \n      let finalUrl = processedUrl\n      \n      // URL이 변경되었거나 에러 상태인 경우 캐시 버스팅 적용\n      if (isUrlChanged || this.error) {\n        finalUrl = this.addCacheBustingLocal(processedUrl)\n      }\n      \n      // 프리로드 옵션이 켜진 경우 미리 로딩\n      if (this.preload) {\n        try {\n          await preloadImage(finalUrl)\n        } catch (error) {\n          // 프리로드 실패는 조용히 무시\n        }\n      }\n      \n      this.imgSrc = finalUrl\n      this.loading = true\n      this.error = false\n      this.lastImageUrl = processedUrl\n      \n      // 이미지 로드 이벤트가 없는 경우 대비 타이머 설정\n      this.$nextTick(() => {\n        const imgElement = this.$refs.imageElement\n        if (imgElement && imgElement.complete && imgElement.naturalWidth > 0) {\n          // 이미 로드된 이미지인 경우\n          this.loading = false\n          this.error = false\n        } else {\n          // 로드 이벤트를 기다리는 타이머 (안전장치)\n          setTimeout(() => {\n            if (this.loading && imgElement && imgElement.complete) {\n              this.loading = false\n            }\n          }, 2000)\n        }\n      })\n    },